.. oct_schema - MongoDB Connection Session

.. toctree::
    :maxdepth: 2

MongoDB Connection Session
==========================

The :class:`oct_schema.Session` object is a wrapper around :mod:`ming`'s
:class:`ming.odm.ThreadLocalODMSession` class.  The :mod:`ming` session
itself is used to abstract away the :mod:`pymongo` connection.

The session is responsible for:

* attaching model classes to the actual MongoDB datastore
* maintaining the unit of work (Transactional support)
* identity map
* relations between objects

An additional, handy feature that :mod:`ming` provides is a special
`MongoDB In Memory` (MIM) component.  This is very handy for unit test
scenarios.

:class:`ming.odm.ThreadLocalODMSession` is a thread-local version of the
session for safe operation in a multithreaded environment.  We may need it
some day ...

Think of the session as a manager of our defined schemas that binds
to the appropriate MongoDB datastore.  The magic occurs in the
:meth:`oct_schema.Session.__init__` method::

    bind = ming.create_datastore(url)
    kwargs = {'doc_session': ming.Session(bind)}
    self._state['s'] = ming.odm.ThreadLocalODMSession(**kwargs)

The Borg Idiom
--------------

:mod:`ming` is very particular about sharing a global session between 
schemas.  When you see the ``__mongometa__`` inner class construct of
the collection models, you will see why this is such a bad idea, especially
when trying to configure the session.  As such, :class:`oct_schema.Session`
is written in a way that ensures that only one instance of a class is ever
created.  The design is based on the `Borg monostate idiom <http://joyrex.spc.uchicago.edu/bookshelves/python/cookbook/pythoncook-CHP-5-SECT-23.html>`_.

Configuring the Session
-----------------------
Unfortunately, there is no way that we can pass database connection
credentials to the :class:`oct_schema.Session` object.  This is because
we cannot pass the arguments to the inner class construct,
``__mongometa__``.  Bad, bad design.  Instead, we must force
the ``__mongometa__.session`` attribute initialisation via
configuration file.  See the :meth:`oct_schema.Session.parse_settings`
method for how this is done.

To run out of the box, a default version of the ``conf/settings.conf``
file is placed at ``/usr/local/share/info/oct-schema/settings.conf``.  This
is required to configure the session.

To import the ``oct-schema`` package via your Python interpreter::

    $ SETTINGS_CONF=/usr/local/share/info/oct-schema python
    >>> import oct_schema
    2014-07-02 16:02:29,193 DEBUG:: Creating Session state ...
    2014-07-02 16:02:29,194 DEBUG:: Checking if "/usr/local/share/info/oct-schema/settings.conf" exists ...
    2014-07-02 16:02:29,194 DEBUG:: Preparing MondoDB connection session ...
    2014-07-02 16:02:29,194 DEBUG:: Building hosts string for <hosts>/<ports>: "localhost/27018"
    2014-07-02 16:02:29,194 INFO:: MongoDB connection string: "mim://localhost:27018/tutorial"
    2014-07-02 16:02:29,194 DEBUG:: Session state created
    >>>

:mod:`oct_schema.Session` will use the database credentials taken from the
``/usr/local/share/info/oct-schema/settings.conf`` file to configure the
session.  As per the log output above, the MongoDB connection string
generated by the default ``settings.conf`` file is
``mim://localhost:27018/tutorial``.  This is interpreted as the ``tutorial``
database on host ``localhost`` at port ``27018``.  However, the ``mim``
scheme spins up the special :mod:`ming` MongoDB In Memory instance - handy
for testing but little else.

To make this scenario a little more useful and connect to a real MongoDB
session, copy the ``/usr/local/share/info/oct-schema/settings.conf`` to
your current working directory and edit the credentials to your
preferred MongoDB instance.  Most importantly, change the ``scheme``
option to ``mongodb``::

    $ cp /usr/local/share/info/oct-schema/settings.conf settings.conf
    $ python
    >>> import oct_schema
    2014-07-02 16:14:05,436 DEBUG:: Creating Session state ...
    2014-07-02 16:14:05,436 DEBUG:: Checking if "./settings.conf" exists ...
    2014-07-02 16:14:05,436 DEBUG:: Preparing MondoDB connection session ...
    2014-07-02 16:14:05,437 DEBUG:: Building hosts string for <hosts>/<ports>: "localhost/27017"
    2014-07-02 16:14:05,437 INFO:: MongoDB connection string: "mongodb://localhost:27017/oct"
    2014-07-02 16:14:05,437 DEBUG:: Session state created

To install a document into the OCT Objects collection::

    >>> import oct_schema.model
    >>> kwargs = {'category_code': 'Objects category_code',
    ...           'location': {'type': 'Point',
    ...                        'coordinates': {'latitude': 33.4217,
    ...                                        'longitude': 69.0789}}}
    >>> o = oct_schema.model.Objects(**kwargs)
    >>> o
    <Objects category_code='Objects category_code'
      created_ts=datetime.datetime(2014, 7, 2, 6, 14, 5, 437508)
      name='' type_id='' country='' osuffix=''
      facility_description='' record_status='' entities=''
      modified_ts=datetime.datetime(2014, 7, 2, 6, 14, 5,
      437529) location=I{'type': 'Point', 'coordinates':
      {'latitude': 33.421700000000001, 'longitude':
      69.078900000000004}} facility_status=''
      _id=ObjectId('53b3a416285de34fb846dd0d') type=''
      be_number=None>
    >>> o.flush
    >>>

``o.flush`` is the :mod:`ming` construct to commit the unit of work to the
datastore.

:class:`oct_schema.Session` Class
---------------------------------

.. autoclass:: oct_schema.Session

Methods
^^^^^^^

.. automethod:: oct_schema.Session.build_url
.. automethod:: oct_schema.Session.parse_settings
.. automethod:: oct_schema.Session._check_username_password
.. automethod:: oct_schema.Session._build_hosts_string
